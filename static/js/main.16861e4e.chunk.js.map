{"version":3,"sources":["components/LandingPage.js","components/FoamTreeSearchPage/SearchBox.js","components/FoamTreeSearchPage/QuestionSuggestions.js","helpers/debounce.js","controllers/dataFetch.js","components/FoamTreeSearchPage/FoamTree.js","components/FoamTreeSearchPage/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","main","display","justifyContent","alignItems","minHeight","flexDirection","marginTop","Landing","classes","useState","searchValue","setSearchValue","history","useHistory","search","e","overrideSearch","preventDefault","push","encodeURI","Container","className","component","maxWidth","CssBaseline","Typography","align","variant","onSubmit","TextField","autoFocus","fullWidth","placeholder","margin","size","value","onChange","target","InputProps","startAdornment","InputAdornment","position","endAdornment","color","Box","QUESTIONS","map","q","i","key","mb","Card","style","cursor","onClick","CardContent","SearchBox","initialValue","onSearch","setValue","inputValue","setInputValue","Autocomplete","freeSolo","options","_","newValue","onInputChange","newInputValue","renderInput","params","questionContainer","width","overflow","questionContent","padding","question","minWidth","marginBottom","textAlign","marginLeft","borderColor","debounce","fn","ms","timer","clearTimeout","setTimeout","fetchData","search_term","a","axios","post","group","data","findDocs","groups","_docs","docs","forEach","g","FoamTree","setDocs","foamtree","setFoamtree","useEffect","_foamtree","CarrotSearchFoamTree","window","id","maxGroupLevelsDrawn","set","event","unselectable","dataObject","debouncedHandleResize","resize","addEventListener","removeEventListener","divider","boxShadow","searchResults","height","searchResultsHeader","searchResultsLink","textDecorationColor","searchResultsTitle","fontSize","fontWeight","Results","length","mt","maxHeight","flex","px","Paper","square","p","d","href","pmid","rel","title","journal","abstract","slice","trim","FoamTreeSearchPage","useParams","setData","setSearch","loading","setLoading","fetch","LinearProgress","my","exact","path","LandingPage","theme","createMuiTheme","palette","secondary","blue","primary","indigo","typography","fontFamily","join","App","ThemeProvider","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","error"],"mappings":"8UAkBMA,EAAYC,aAAW,iBAAO,CAClCC,KAAM,CACJC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,UAAW,QACXC,cAAe,SACfC,UAAW,WA6EAC,EAzEC,WACd,IAAMC,EAAUV,IADI,EAEkBW,mBAAS,IAF3B,mBAEbC,EAFa,KAEAC,EAFA,KAGdC,EAAUC,cAEVC,EAAS,SAACC,EAAGC,GACbD,GACFA,EAAEE,iBACAD,EACFJ,EAAQM,KAAKC,UAAUH,IAEvBJ,EAAQM,KAAKC,UAAUT,KAG3B,OACE,kBAACU,EAAA,EAAD,CAAWC,UAAWb,EAAQR,KAAMsB,UAAU,OAAOC,SAAS,MAC5D,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAYC,MAAM,SAASJ,UAAU,KAAKK,QAAQ,MAAlD,WAIA,kBAACF,EAAA,EAAD,CAAYC,MAAM,SAASJ,UAAU,KAAKK,QAAQ,MAAlD,0DAIA,kBAACP,EAAA,EAAD,CAAWG,SAAS,MAClB,0BAAMK,SAAUd,GACd,kBAACe,EAAA,EAAD,CACEC,WAAS,EACTC,WAAS,EACTC,YAAY,SACZL,QAAQ,WACRM,OAAO,SACPC,KAAK,QACLC,MAAOzB,EACP0B,SAAU,SAACrB,GAAD,OAAOJ,EAAeI,EAAEsB,OAAOF,QACzCG,WAAY,CACVC,eACE,kBAACC,EAAA,EAAD,CAAgBC,SAAS,SACvB,kBAAC,IAAD,OAGJC,aACE,kBAACF,EAAA,EAAD,CAAgBC,SAAS,OACvB,kBAAC,IAAD,WAOV,kBAAChB,EAAA,EAAD,CAAYH,UAAU,IAAIqB,MAAM,gBAAgBhB,QAAQ,YAAxD,wBAIA,kBAACiB,EAAA,EAAD,KACCC,EAAUC,KAAI,SAACC,EAAGC,GAAJ,OACb,kBAACJ,EAAA,EAAD,CAAKK,IAAKD,EAAGE,GAAI,GACf,kBAACC,EAAA,EAAD,CAAMxB,QAAQ,WAAWyB,MAAO,CAAEC,OAAQ,WAAaC,QAAS,kBAAMxC,EAAO,KAAMiC,KACjF,kBAACQ,EAAA,EAAD,KACE,kBAAC9B,EAAA,EAAD,CAAYE,QAAQ,QAAQL,UAAU,KACnCyB,a,kCCzDJS,EA1BG,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SAAe,EACtBjD,mBAASgD,GADa,mBACzCtB,EADyC,KAClCwB,EADkC,OAEZlD,mBAAS,IAFG,mBAEzCmD,EAFyC,KAE7BC,EAF6B,KAIhD,OACE,kBAACC,EAAA,EAAD,CACEC,UAAQ,EACRhC,WAAS,EACTC,YAAY,SACZL,QAAQ,WACRO,KAAK,QACL8B,QAASnB,EACTV,MAAOA,EACPyB,WAAYA,EACZxB,SAAU,SAAC6B,EAAGC,GACZP,EAASO,GACLA,GAAUR,EAASQ,IAEzBC,cAAe,SAACF,EAAGG,GAAJ,OAAsBP,EAAcO,IACnDC,YAAa,SAAAC,GAAM,OACjB,kBAACzC,EAAA,EAAD,iBAAeyC,EAAf,CAAuBtC,YAAY,SAASL,QAAQ,kB,GChB1C5B,YAAW,CAC3BwE,kBAAmB,CACjBtE,QAAS,OACTuE,MAAO,OACPC,SAAU,UAEZC,gBAAiB,CACfC,QAAS,qBAEXC,SAAU,CACR3E,QAAS,OACT4E,SAAU,MACV5C,OAAQ,OACR6C,aAAc,IACdC,UAAW,SACX7E,eAAgB,SAChBC,WAAY,SACZkD,OAAQ,UACR,kBAAmB,CACjB2B,WAAY,KAEd,UAAW,CACTC,YAAa,sB,OCtBJC,EAXE,SAACC,EAAIC,GACpB,IAAIC,EACJ,OAAO,WACLC,aAAaD,GACbA,EAAQE,YAAW,WACjBF,EAAQ,KACRF,EAAE,WAAF,eACCC,K,yBCLMI,EAAS,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,4DACL,+DADK,SAGAC,IAAMC,KAFX,+DAE2B,CAAEH,cAAaI,OAAO,IAH5C,uBAGfC,EAHe,EAGfA,KAHe,kBAIhBA,GAJgB,2CAAH,sDAOTC,EAAW,SAAXA,EAAY,GAAiC,IAAD,IAA9BC,cAA8B,MAArB,GAAqB,MAAjBC,aAAiB,MAAT,GAAS,EACnDC,EAAI,YAAQD,GAEhB,OADAD,EAAOG,SAAQ,SAAAC,GAAC,OAAIF,EAAI,sBAAQA,GAAR,YAAiBH,EAASK,QAC3CF,GCuCMG,EA9CE,SAAC,GAIX,IAAD,IAHJjD,aAGI,MAHI,GAGJ,MAFJ4C,cAEI,MAFK,GAEL,EADJM,EACI,EADJA,QACI,EAC4B7F,mBAAS,MADrC,mBACG8F,EADH,KACaC,EADb,KAqCJ,OAlCAC,qBAAU,WAAO,IAGTC,EAAY,IAAIC,EAFWC,OAAzBD,sBAEmC,CACzCE,GAAI,WACJC,oBAAqB,IAGvBJ,EAAUK,IAAI,gBAAgB,SAACC,GAAW,IAChCnB,EAAUmB,EAAVnB,MACR,GAAIA,GAASA,EAAMoB,aACjBD,EAAM/F,sBACD,GAAI4E,GAASA,EAAMG,OAAQ,CAChC,IAAME,EAAOH,EAASF,GACtBS,EAAQJ,OAIZM,EAAYE,KACX,CAACJ,IAEJG,qBAAU,WACJF,GAAUA,EAASQ,IAAI,CAAEG,WAAY,CAAElB,cAC1C,CAACO,EAAUP,IAEdS,qBAAU,WACR,IAAMU,EAAwBjC,GAAS,WACjCqB,GAAUA,EAASa,WACtB,KAGH,OADAR,OAAOS,iBAAiB,SAAUF,GAC3B,kBAAMP,OAAOU,oBAAoB,SAAUH,OAIlD,yBAAKN,GAAG,WAAWzD,MAAK,eAAOA,M,kBC/B7BtD,EAAYC,aAAW,iBAAO,CAClCwH,QAAS,CACPzC,aAAc,SACd0C,UAAW,qCAEbC,cAAe,CACbC,OAAQ,OACRjD,SAAU,UAEZkD,oBAAqB,CACnB1H,QAAS,OACTE,WAAY,UAEdyH,kBAAmB,CACjBC,oBAAqB,QAEvBC,mBAAoB,CAClBxH,UAAW,EACXwE,aAAc,EACdiD,SAAU,SACVC,WAAY,YAIVC,EAAU,SAAC,GAA6B,IAA3BnC,EAA0B,EAA1BA,KAAMI,EAAoB,EAApBA,KAAMI,EAAc,EAAdA,QAGvB9F,EAAUV,IAEhB,OAAoB,IAAhBoG,EAAKgC,OAEL,kBAACtF,EAAA,EAAD,CACE3C,QAAQ,OACRyH,OAAO,MACPxH,eAAe,SACfC,WAAW,UAEX,kBAACsB,EAAA,EAAD,CAAYH,UAAU,KAAKK,QAAQ,MAAnC,yBAQJ,kBAACiB,EAAA,EAAD,CAAKuF,GAAI,EAAGlI,QAAQ,OAAOG,UAAU,MAAMgI,UAAU,OACnD,kBAAC,EAAD,CACEhF,MAAO,CAAEiF,KAAM,OACfrC,OAAQF,EACRQ,QAASA,IAGX,kBAAC1D,EAAA,EAAD,CAAK0F,GAAI,EAAGD,KAAK,MAAMpI,QAAQ,OAAOI,cAAc,UAClD,kBAACuC,EAAA,EAAD,CAAKM,GAAI,GACP,kBAACqF,EAAA,EAAD,CAAO5G,QAAQ,WAAW6G,QAAM,GAC9B,kBAAC5F,EAAA,EAAD,CAAK6F,EAAG,GACN,kBAAChH,EAAA,EAAD,CAAYH,UAAU,KAAtB,4BAON,kBAACsB,EAAA,EAAD,CAAKyF,KAAK,MAAMhH,UAAWb,EAAQiH,eAChCvB,EAAKpD,KAAI,SAAC4F,EAAG1F,GAAJ,OACR,kBAACJ,EAAA,EAAD,CAAKK,IAAKD,EAAGE,GAAI,GACf,kBAACqF,EAAA,EAAD,CAAO5G,QAAQ,WAAW6G,QAAM,GAC9B,kBAAC5F,EAAA,EAAD,CAAK6F,EAAG,GACN,kBAAC7F,EAAA,EAAD,CAAKvB,UAAWb,EAAQmH,qBACtB,uBACEgB,KAAI,0CAAqCD,EAAEE,MAC3CvG,OAAO,SACPwG,IAAI,sBACJxH,UAAWb,EAAQoH,mBAEnB,kBAACnG,EAAA,EAAD,CAAYH,UAAU,KAAKK,QAAQ,KAAKgB,MAAM,eAC3C+F,EAAEI,SAKT,kBAAClG,EAAA,EAAD,CAAKuF,GAAI,GACP,kBAAC1G,EAAA,EAAD,CAAYH,UAAU,IAAIK,QAAQ,YAAYgB,MAAM,WACjD+F,EAAEK,SAGL,kBAACtH,EAAA,EAAD,CAAYH,UAAU,IAAIK,QAAQ,YAAYgB,MAAM,eAChD+F,EAAEM,SAASd,QA9DZ,IA8DA,UAAyCQ,EAAEM,SAASC,MAAM,EA9D1D,KA8D2EC,OAA3E,OAAyFR,EAAEM,qBAyDnGG,EA5CY,WACzB,IAAM7E,EAAS8E,cADgB,EAGP3I,mBAAS,IAHF,mBAGxBqF,EAHwB,KAGlBuD,EAHkB,OAIP5I,mBAAS,IAJF,mBAIxByF,EAJwB,KAIlBI,EAJkB,OAMH7F,mBAAS6D,EAAOxD,QANb,mBAMxBA,EANwB,KAMhBwI,EANgB,OAOD7I,oBAAS,GAPR,mBAOxB8I,EAPwB,KAOfC,EAPe,KAwB/B,OAdA/C,qBAAU,WACR,IAAMgD,EAAK,uCAAG,8BAAA/D,EAAA,sEACOF,EAAU1E,GADjB,OACNgF,EADM,OAENI,EAAOH,EAAS,CAAEC,OAAQF,IAEhCuD,EAAQvD,GACRQ,EAAQJ,GACRsD,GAAW,GANC,2CAAH,qDASXA,GAAW,GACXC,MACC,CAAC3I,IAGF,oCACGyI,EAAU,kBAACG,EAAA,EAAD,MAAqB,KAChC,kBAAC9G,EAAA,EAAD,CAAK6F,EAAG,EAAGf,OAAO,SAChB,kBAAClG,EAAA,EAAD,MACA,kBAACoB,EAAA,EAAD,CAAK+G,GAAI,GACP,kBAAClI,EAAA,EAAD,CAAYH,UAAU,KAAKK,QAAQ,MAAnC,YAKF,kBAAC,EAAD,CAAW8B,aAAca,EAAOxD,OAAQ4C,SAAU4F,IAGhDC,EAAkE,KAAxD,kBAAC,EAAD,CAASzD,KAAMA,EAAMI,KAAMA,EAAMI,QAASA,OCrJ/C,oBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsD,OAAK,EAACC,KAAK,IAAIvI,UAAWwI,IACjC,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,WAAWvI,UAAW6H,O,iCCDxCY,EAAQC,YAAe,CAC3BC,QAAS,CACPC,UAAW,CACTlK,KAAMmK,IAAK,MAEbC,QAAS,CACPpK,KAAMqK,IAAO,OAGjBC,WAAY,CAEVC,WAAY,CACV,SACA,cACAC,KAAK,QAUIC,EANH,kBACV,kBAACC,EAAA,EAAD,CAAeX,MAAOA,GACpB,kBAAC,EAAD,QChBgBY,QACW,cAA7B/D,OAAOgE,SAASC,UAEe,UAA7BjE,OAAOgE,SAASC,UAEhBjE,OAAOgE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,aAAaC,MAAMC,QAAQC,W","file":"static/js/main.16861e4e.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Container from '@material-ui/core/Container';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport SearchIcon from '@material-ui/icons/Search';\nimport MicIcon from '@material-ui/icons/Mic';\nimport TextField from '@material-ui/core/TextField';\n\nimport QUESTIONS from '../questionSuggestions.json';\n\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n  main: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    minHeight: '100vh',\n    flexDirection: 'column',\n    marginTop: '15%'\n  }\n}));\n\nconst Landing = () => {\n  const classes = useStyles();\n  const [searchValue, setSearchValue] = useState('');\n  const history = useHistory();\n\n  const search = (e, overrideSearch) => {\n    if (e)\n      e.preventDefault();\n    if (overrideSearch)\n      history.push(encodeURI(overrideSearch));\n    else\n      history.push(encodeURI(searchValue));\n  };\n\n  return (\n    <Container className={classes.main} component=\"main\" maxWidth=\"xl\">\n      <CssBaseline />\n      <Typography align=\"center\" component=\"h1\" variant=\"h3\">\n        BREATHE\n      </Typography>\n\n      <Typography align=\"center\" component=\"h2\" variant=\"h6\">\n        Biomedical Research Extensive Archive To Help Everyone\n      </Typography>\n      \n      <Container maxWidth=\"sm\">\n        <form onSubmit={search}>\n          <TextField\n            autoFocus\n            fullWidth\n            placeholder=\"search\"\n            variant=\"outlined\"\n            margin=\"normal\"\n            size=\"small\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              ),\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <MicIcon />\n                </InputAdornment>\n              )\n            }}\n          />\n        </form>\n\n        <Typography component=\"p\" color=\"textSecondary\" variant=\"overline\">\n          Question you can try\n        </Typography>\n\n        <Box>\n        {QUESTIONS.map((q, i) => (\n          <Box key={i} mb={2}>\n            <Card variant=\"outlined\" style={{ cursor: 'pointer' }} onClick={() => search(null, q)}>\n              <CardContent>\n                <Typography variant=\"body2\" component=\"p\">\n                  {q}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Box>\n        ))}\n        </Box>\n      </Container>\n    </Container>\n  );\n};\n\nexport default Landing;\n","import React, { useState } from 'react';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\n\nimport QUESTIONS from '../../questionSuggestions.json';\n\nconst SearchBox = ({ initialValue, onSearch }) => {\n  const [value, setValue] = useState(initialValue);\n  const [inputValue, setInputValue] = useState('');\n\n  return (\n    <Autocomplete\n      freeSolo\n      fullWidth\n      placeholder=\"search\"\n      variant=\"outlined\"\n      size=\"small\"\n      options={QUESTIONS}\n      value={value}\n      inputValue={inputValue}\n      onChange={(_, newValue) => {\n        setValue(newValue);\n        if (newValue) onSearch(newValue);\n      }}\n      onInputChange={(_, newInputValue) => setInputValue(newInputValue)}\n      renderInput={params => (\n        <TextField {...params} placeholder=\"search\" variant=\"outlined\" />\n      )}\n    />\n  );\n};\n\nexport default SearchBox;\n","import React, { useState, useEffect } from 'react';\n\nimport Box from '@material-ui/core/Box';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nimport QUESTIONS from '../../questionSuggestions.json';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  questionContainer: {\n    display: 'flex',\n    width: '100%',\n    overflow: 'scroll',\n  },\n  questionContent: {\n    padding: '0.5rem !important',\n  },\n  question: {\n    display: 'flex',\n    minWidth: '35%',\n    margin: '1rem',\n    marginBottom: '0',\n    textAlign: 'center',\n    justifyContent: 'center',\n    alignItems: 'center',\n    cursor: 'pointer',\n    '&:first-of-type': {\n      marginLeft: '0'\n    },\n    '&:hover': {\n      borderColor: 'rgb(66, 66, 66)'\n    }\n  },\n});\n\nconst QuestionSuggestions = ({ filter, onClick }) => {\n  const classes = useStyles();\n  const [questions, setQuestions] = useState([]);\n\n  useEffect(() => {\n    const regex = new RegExp(filter, 'gi');\n    \n    setQuestions(\n      QUESTIONS.filter(q => q.match(regex) && q !== filter)\n    );\n  }, [filter]);\n\n  return (\n    <Box className={classes.questionContainer} component=\"aside\">\n      {questions.map((q, i) => {\n        return (\n          <Card\n            key={i}\n            className={classes.question}\n            variant=\"outlined\"\n            onClick={() => onClick(q)}\n          >\n            <CardContent className={classes.questionContent}>\n              <Typography color=\"textSecondary\">{q}</Typography>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </Box>\n  );\n};\n\nexport default QuestionSuggestions;\n","const debounce = (fn, ms) => {\n  let timer;\n  return () => {\n    clearTimeout(timer);\n    timer = setTimeout((...args) => {\n      timer = null;\n      fn(...args);\n    }, ms);\n  };\n};\n\nexport default debounce;\n","import axios from 'axios';\n\nexport const fetchData = async search_term => {\n  const CLOUD_URL = \"https://us-central1-for-web-search.cloudfunctions.net/search\"\n  \n  const { data } = await axios.post(CLOUD_URL, { search_term, group: true });\n  return data;\n};\n\nexport const findDocs = ({ groups = [], _docs = [] }) => {\n  let docs = [ ..._docs ];\n  groups.forEach(g => docs = [ ...docs, ...findDocs(g) ]);\n  return docs;\n};\n","import React, { useState, useEffect } from 'react';\n\nimport debounce from '../../helpers/debounce';\nimport { findDocs } from '../../controllers/dataFetch';\n\nconst FoamTree = ({\n  style = {},\n  groups = {},\n  setDocs\n}) => {\n  const [foamtree, setFoamtree] = useState(null);\n\n  useEffect(() => {\n    const { CarrotSearchFoamTree } = window;\n\n    const _foamtree = new CarrotSearchFoamTree({\n      id: 'foamtree',\n      maxGroupLevelsDrawn: 1,\n    });\n\n    _foamtree.set('onGroupClick', (event) => {\n      const { group } = event;\n      if (group && group.unselectable) {\n        event.preventDefault();\n      } else if (group && group.groups) {\n        const docs = findDocs(group);\n        setDocs(docs);\n      }\n    });\n\n    setFoamtree(_foamtree);\n  }, [setDocs]);\n\n  useEffect(() => {\n    if (foamtree) foamtree.set({ dataObject: { groups }});\n  }, [foamtree, groups]);\n\n  useEffect(() => {\n    const debouncedHandleResize = debounce(() => {\n      if (foamtree) foamtree.resize();\n    }, 200);\n\n    window.addEventListener('resize', debouncedHandleResize);\n    return () => window.removeEventListener('resize', debouncedHandleResize);\n  });\n\n  return (\n    <div id=\"foamtree\" style={{ ...style }}></div>\n  );\n}\n\nexport default FoamTree;\n","import React, { useState, useEffect } from 'react';\n\nimport SearchBox from './SearchBox';\nimport QuestionSuggestions from './QuestionSuggestions';\nimport FoamTree from './FoamTree';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nimport { useParams } from 'react-router-dom';\nimport { fetchData, findDocs } from '../../controllers/dataFetch';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n  divider: {\n    marginBottom: '1.5rem',\n    boxShadow: '0px 1px 3px 1px rgba(0,0,0,0.025)'\n  },\n  searchResults: {\n    height: '100%',\n    overflow: 'scroll'\n  },\n  searchResultsHeader: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  searchResultsLink: {\n    textDecorationColor: '#000'\n  },\n  searchResultsTitle: {\n    marginTop: 0,\n    marginBottom: 0,\n    fontSize: '1.5rem',\n    fontWeight: 'bold',\n  }\n}));\n\nconst Results = ({ data, docs, setDocs }) => {\n  const MAX_ABSTRACT = 250;\n\n  const classes = useStyles();\n\n  if (docs.length === 0) {\n    return (\n      <Box\n        display=\"flex\"\n        height=\"85%\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Typography component=\"h4\" variant=\"h3\">\n          NO RESULTS FOR QUERY\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box mt={2} display=\"flex\" minHeight=\"85%\" maxHeight=\"85%\">\n      <FoamTree\n        style={{ flex: '50%' }}\n        groups={data}\n        setDocs={setDocs}\n      />\n\n      <Box px={2} flex=\"50%\" display=\"flex\" flexDirection=\"column\">\n        <Box mb={1}>\n          <Paper variant=\"outlined\" square>\n            <Box p={1}>\n              <Typography component=\"p\">\n                Top 100 of 451 papers\n              </Typography>\n            </Box>\n          </Paper>\n        </Box>\n\n        <Box flex=\"50%\" className={classes.searchResults}>\n          {docs.map((d, i) => (\n            <Box key={i} mb={2}>\n              <Paper variant=\"outlined\" square>\n                <Box p={2}>\n                  <Box className={classes.searchResultsHeader}>\n                    <a\n                      href={`https://pubmed.ncbi.nlm.nih.gov/${d.pmid}`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className={classes.searchResultsLink}\n                    >\n                      <Typography component=\"h4\" variant=\"h5\" color=\"textPrimary\">\n                        {d.title}\n                      </Typography>\n                    </a>\n                  </Box>\n                  \n                  <Box mt={1}>\n                    <Typography component=\"p\" variant=\"subtitle1\" color=\"primary\">\n                      {d.journal}\n                    </Typography>\n\n                    <Typography component=\"p\" variant=\"subtitle1\" color=\"textPrimary\">\n                      {(d.abstract.length >= MAX_ABSTRACT) ? `${d.abstract.slice(0, MAX_ABSTRACT).trim()}...` : d.abstract}\n                    </Typography>\n                  </Box>\n                </Box>\n              </Paper>\n            </Box>\n          ))}\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nconst FoamTreeSearchPage = () => {\n  const params = useParams();\n\n  const [data, setData] = useState({});\n  const [docs, setDocs] = useState([]);\n\n  const [search, setSearch] = useState(params.search);\n  const [loading, setLoading] = useState(true);\n  // const [inputValue, setInputValue] = useState(params.search);\n\n  useEffect(() => {\n    const fetch = async () => {\n      const data = await fetchData(search);\n      const docs = findDocs({ groups: data });\n      \n      setData(data);\n      setDocs(docs);\n      setLoading(false);\n    };\n\n    setLoading(true);\n    fetch();\n  }, [search]);\n\n  return (\n    <>\n      {loading ? <LinearProgress /> : null}\n      <Box p={3} height=\"100vh\">\n        <CssBaseline />\n        <Box my={2}>\n          <Typography component=\"h1\" variant=\"h4\">\n            BREATHE\n          </Typography>\n        </Box>\n\n        <SearchBox initialValue={params.search} onSearch={setSearch} />\n        {/* <QuestionSuggestions filter={inputValue} onClick={(q) => { setInputValue(q); setSearch(q); }} /> */}\n\n        {!loading ? <Results data={data} docs={docs} setDocs={setDocs} /> : null}\n      </Box>\n    </>\n  );\n};\n\nexport default FoamTreeSearchPage;\n","import React from 'react';\nimport { Route, HashRouter, Switch } from 'react-router-dom';\nimport LandingPage from './components/LandingPage';\nimport FoamTreeSearchPage from './components/FoamTreeSearchPage/';\n\nexport default () => (\n  <HashRouter>\n    <Switch>\n      <Route exact path='/' component={LandingPage} />\n      <Route exact path='/:search' component={FoamTreeSearchPage} />\n    </Switch>\n  </HashRouter>\n);","import React from 'react';\n\nimport Routes from './routes';\n\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core/styles'\nimport { blue, indigo } from '@material-ui/core/colors'\n\nconst theme = createMuiTheme({\n  palette: {\n    secondary: {\n      main: blue[900]\n    },\n    primary: {\n      main: indigo[700]\n    }\n  },\n  typography: {\n    // Use the system font instead of the default Roboto font.\n    fontFamily: [\n      '\"Lato\"',\n      'sans-serif'\n    ].join(',')\n  }\n});\n\nconst App = () => (\n  <ThemeProvider theme={theme}>\n    <Routes />  \n  </ThemeProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister().catch(console.error);\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}